import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories { maven { url "https://plugins.gradle.org/m2/" } }
}

plugins {
    id 'net.researchgate.release' version '2.6.0'
    id 'jp.classmethod.aws.cloudformation' version '0.35'
}

group = 'com.cfnstacks'
description = 'Artifact storage on S3'

defaultProperty('stackname', 'artifacts3-repo')
def defaultProperty(String name, defaultValue) {
    if(!hasProperty(name)) { ext."$name" = defaultValue }
}

release { tagTemplate = 'v${version}' }

task build(type: Sync) {
    from 'src/main/cloudformation'
    into 'build/cloudformation'
    filter(ReplaceTokens, tokens: [artifactId: project.name, version: project.version])
}

task clean(type: Delete) {
    delete 'build'
}

aws {
    profileName = aws_profile_name
    region = aws_region
}

cloudFormation {
    templateFile = project.file('build/cloudformation/artifacts3-repo.yaml')
    stackName = stackname
    capabilityIam true
    conventionMapping.stackParams = {
        def stackParams
        def stack = cloudFormation.getStack()
        if (stack.isPresent()) {
            // existing parameter values
            stackParams = cloudFormation.toMap(stack.get().parameters)
        } else {
            assert project.uploadBundle.didWork
            // default values
            stackParams = [
                    KeyName: "sample-key",
                    EnvironmentType: "local"
            ]
        }
        return stackParams
    }
}

// Take action and return immediately
task updateStack(dependsOn: [build, awsCfnMigrateStack]) {}
task createStack(dependsOn: [updateStack]) {}
task deleteStack(dependsOn: [awsCfnDeleteStack]) {}

// Take action and wait until completion before returning
task updateStackWait(dependsOn: [build, awsCfnMigrateStackAndWaitCompleted]) {}
task createStackWait(dependsOn: [updateStack]) {}
task deleteStackWait(dependsOn: [awsCfnDeleteStackAndWaitCompleted]) {}